/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface DFAInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addresses"
      | "authenticate"
      | "getStoredAddresses"
      | "hashedCredentials"
      | "storeCredentials"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authenticate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStoredAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashedCredentials",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "storeCredentials",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "addresses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authenticate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStoredAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashedCredentials",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeCredentials",
    data: BytesLike
  ): Result;
}

export interface DFA extends BaseContract {
  connect(runner?: ContractRunner | null): DFA;
  waitForDeployment(): Promise<this>;

  interface: DFAInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addresses: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  authenticate: TypedContractMethod<
    [userId: string, password: string],
    [boolean],
    "view"
  >;

  getStoredAddresses: TypedContractMethod<[], [string[]], "view">;

  hashedCredentials: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  storeCredentials: TypedContractMethod<
    [userId: string, password: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "authenticate"
  ): TypedContractMethod<[userId: string, password: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "getStoredAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "hashedCredentials"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "storeCredentials"
  ): TypedContractMethod<
    [userId: string, password: string],
    [void],
    "nonpayable"
  >;

  filters: {};
}
